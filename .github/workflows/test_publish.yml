
name: Test Pymef

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install numpy
        pip install -e .

    - name: Test package
      env:
        PYTHONPATH: .
      run:
        python -m unittest

  release:
    if: contains(github.ref, 'refs/tags/')
    needs: test

    strategy:
      matrix:
        buildplat:
          - [ ubuntu-22.04, manylinux_x86_64, "" ]
          - [ macos-13, macosx_x86_64, "x86_64" ]
          - [ macos-14, macosx_universal2, "universal2" ]
          - [ windows-2022, win_amd64, "" ]
        python: ["cp38", "cp39", "cp310", "cp311", "cp312"]

    runs-on: ${{ matrix.buildplat[0] }}

    steps:

    - uses: actions/checkout@v2

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel
        pip install setuptools
        pip install numpy
        pip install twine

    - name: Build wheels
      run: python -m cibuildwheel --output-dir dist/
      env:
        CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
        CIBW_ARCHS: ${{ matrix.buildplat[2] != '' && matrix.buildplat[2] || null }}
        CIBW_SKIP: "pp*"

    - name: Publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload --skip-existing dist/pymef*


